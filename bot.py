import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import sqlite3
import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('univer.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subjects (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS homeworks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subject_id INTEGER,
            task_text TEXT,
            deadline DATE,
            file_id TEXT,
            FOREIGN KEY (subject_id) REFERENCES subjects (id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            day TEXT,
            subject_id INTEGER,
            time TEXT,
            FOREIGN KEY (subject_id) REFERENCES subjects (id)
        )
    ''')
    
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")],
        [InlineKeyboardButton("üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="homeworks")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="add_subject")],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É", callback_data="add_homework")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "homeworks":
        await show_homeworks(query, context)
    elif query.data == "schedule":
        await show_schedule(query, context)
    elif query.data == "add_subject":
        await add_subject_handler(query, context)
    elif query.data == "add_homework":
        await add_homework_handler(query, context)
    elif query.data.startswith("subject_"):
        subject_id = int(query.data.split("_")[1])
        context.user_data['selected_subject'] = subject_id
        await query.edit_message_text(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n–î–î.–ú–ú.–ì–ì–ì–ì\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ 1-5 –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ\n25.12.2024"
        )

async def show_homeworks(query, context):
    conn = sqlite3.connect('univer.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT h.id, s.name, h.task_text, h.deadline, h.file_id
        FROM homeworks h
        JOIN subjects s ON h.subject_id = s.id
        ORDER BY h.deadline
    ''')
    
    homeworks = cursor.fetchall()
    conn.close()
    
    if not homeworks:
        await query.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π")
        return
    
    text = "üìö –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
    for hw in homeworks:
        try:
            deadline_date = datetime.datetime.strptime(hw[3], '%Y-%m-%d').date()
            days_left = (deadline_date - datetime.date.today()).days
            status = "‚úÖ" if days_left < 0 else "‚è∞"
            text += f"{status} {hw[1]}\n"
            text += f"üìù {hw[2]}\n"
            text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {hw[3]} ({days_left} –¥–Ω–µ–π)\n\n"
        except:
            continue
    
    await query.edit_message_text(text)

async def show_schedule(query, context):
    conn = sqlite3.connect('univer.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT s.day, sub.name, s.time
        FROM schedule s
        JOIN subjects sub ON s.subject_id = sub.id
        ORDER BY 
            CASE s.day
                WHEN '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' THEN 1
                WHEN '–≤—Ç–æ—Ä–Ω–∏–∫' THEN 2
                WHEN '—Å—Ä–µ–¥–∞' THEN 3
                WHEN '—á–µ—Ç–≤–µ—Ä–≥' THEN 4
                WHEN '–ø—è—Ç–Ω–∏—Ü–∞' THEN 5
                WHEN '—Å—É–±–±–æ—Ç–∞' THEN 6
                ELSE 7
            END,
            s.time
    ''')
    
    schedule = cursor.fetchall()
    conn.close()
    
    if not schedule:
        await query.edit_message_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    text = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    current_day = ""
    for lesson in schedule:
        if lesson[0] != current_day:
            current_day = lesson[0]
            text += f"\nüìå {current_day.capitalize()}:\n"
        text += f"üïí {lesson[2]} - {lesson[1]}\n"
    
    await query.edit_message_text(text)

async def add_subject_handler(query, context):
    context.user_data['awaiting_subject'] = True
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")

async def add_homework_handler(query, context):
    conn = sqlite3.connect('univer.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, name FROM subjects")
    subjects = cursor.fetchall()
    conn.close()
    
    if not subjects:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç'")
        return
    
    keyboard = []
    for subject in subjects:
        keyboard.append([InlineKeyboardButton(subject[1], callback_data=f"subject_{subject[0]}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    
    if user_data.get('awaiting_subject'):
        subject_name = update.message.text
        
        conn = sqlite3.connect('univer.db')
        cursor = conn.cursor()
        cursor.execute("INSERT INTO subjects (name) VALUES (?)", (subject_name,))
        conn.commit()
        conn.close()
        
        user_data['awaiting_subject'] = False
        await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        
    elif user_data.get('selected_subject'):
        text = update.message.text
        lines = text.split('\n')
        
        if len(lines) >= 2:
            task_text = lines[0]
            deadline_str = lines[1].strip()
            
            try:
                deadline = datetime.datetime.strptime(deadline_str, '%d.%m.%Y').date()
                
                conn = sqlite3.connect('univer.db')
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                cursor.execute("SELECT name FROM subjects WHERE id = ?", (user_data['selected_subject'],))
                subject_name = cursor.fetchone()[0]
                
                cursor.execute(
                    "INSERT INTO homeworks (subject_id, task_text, deadline) VALUES (?, ?, ?)",
                    (user_data['selected_subject'], task_text, deadline)
                )
                conn.commit()
                conn.close()
                
                await update.message.reply_text(
                    f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                    f"üìñ –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
                    f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task_text}\n"
                    f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_str}"
                )
                
                user_data['selected_subject'] = None
                
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)")
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
